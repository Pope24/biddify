@page "/Auction/Details/{id}"
@using Common
@model Biddify.Pages.Auction.AuctionDetailModel
@{
    ViewData["Title"] = "Auction Details";
    var item = Model.Item;
    Layout = "~/Pages/Shared/_Layout.cshtml";
    var timerId = $"timer-{item.Id}";
    var endEpoch = ((DateTimeOffset)DateTime.SpecifyKind(item.EndTime, DateTimeKind.Utc)).ToUnixTimeMilliseconds();
    decimal currentPrice = item.Bids.Any()
        ? item.Bids.OrderByDescending(b => b.Amount).First().Amount
        : item.StartPrice;

    decimal minBidPrice = item.MinBidPrice;
    var errorMessage = TempData["AccessBidDetailError"]?.ToString();
    var showErrorModal = !string.IsNullOrEmpty(errorMessage);
}

@section FullWidthHeader {
    <div class="banner-wrapper">
        <img src="https://demo-egenslab.b-cdn.net/html/bidgen/preview/assets/images/banner/breadcrumb-bg.png"
             class="banner-image"
             alt="Auction Banner" />
        <div class="banner-content" style="top: 14%">
            <h1 class="banner-title">Auction Details</h1>
            <p class="banner-breadcrumb flex item-center">
                <a href="/" class="banner-link">Home</a> /
                <a href="/Auction" class="banner-link">Auction</a> / Details
            </p>
        </div>
    </div>
}

<!-- Main Content -->
<div class="container mx-auto px-4 py-10">
    <!-- Main Content -->
    <div class="container mx-auto px-4 py-10">
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-10">
            <!-- LEFT COLUMN -->
            <div>
                <!-- Current Bid Box -->
                <div class="background-primary flex justify-content-between text-white rounded-lg p-4 mb-4">
                    <div>
                        <p class="text-sm">Current Bid</p>
                        <p class="text-3xl font-bold" id="current-price" data-current="@currentPrice" data-minbid="@minBidPrice">
                            $@currentPrice.ToString("#,##0.00")
                        </p>
                    </div>
                    <div class="bid-timer">
                        <p id="@timerId" data-end="@endEpoch" class="timer-text">-- : -- : --</p>
                    </div>
                </div>
                <div class="relative">
                    <!-- Main Image -->
                    <div class="relative">
                        <img id="main-image" src="@item.ImageUrls[0]" alt="@item.Title" class="w-full h-[320px] object-contain rounded shadow" />
                    </div>

                    <!-- Next and Prev buttons -->
                    <button id="prev" class="absolute left-4 top-1/2 transform -translate-y-1/2 text-white bg-white p-2 rounded">
                        <i class="bi bi-chevron-left text-black"></i>
                    </button>
                    <button id="next" class="absolute right-4 top-1/2 transform -translate-y-1/2 text-white bg-white p-2 rounded">
                        <i class="bi bi-chevron-right text-black"></i>
                    </button>
                </div>

                <!-- Thumbnails -->
                <div class="flex gap-2 mt-4">
                    @foreach (string img in item.ImageUrls)
                    {
                        <img src="@img" class="thumbnail w-16 h-16 object-cover rounded border cursor-pointer" data-index="0" />
                    }
                </div>

                <!-- Tabs -->
                <div class="mt-6">
                    <div class="flex space-x-4 border-b">
                        <button class="tab-btn border-b-2 py-2 px-4 font-medium text-sm text-black border-black" data-tab="desc">Description</button>
                        <button class="tab-btn text-gray-600 hover:text-black py-2 px-4 text-sm" data-tab="location">Location</button>
                        <button class="tab-btn text-gray-600 hover:text-black py-2 px-4 text-sm" data-tab="video">About Video</button>
                    </div>
                    <div class="tab-content mt-4 text-gray-700 text-sm">
                        <div class="tab-panel" id="tab-desc">
                            @item.Description
                        </div>
                        <div class="tab-panel hidden" id="tab-location">
                            Địa điểm: Hà Nội hoặc TP.HCM tùy theo người bán.
                        </div>
                        <div class="tab-panel hidden" id="tab-video">
                            Video giới thiệu sẽ được nhúng tại đây.
                        </div>
                    </div>
                </div>
            </div>

            <!-- RIGHT COLUMN -->
            <div class="bg-white rounded-lg p-6 shadow-lg">
                <!-- Title + Description -->
                <h2 class="text-2xl font-bold">@item.Title</h2>
                <p class="text-gray-600 mt-2">@item.Description</p>

                <!-- Product Overview -->
                <div class="mt-6">
                    <h3 class="text-lg font-semibold border-b pb-2 mb-4">Product Overview</h3>
                    <div class="grid grid-cols-2 gap-y-3 text-sm text-gray-800">
                        <p><span class="font-semibold">Start price:</span> $@item.StartPrice.ToString("#,##0.00")</p>
                        <p><span class="font-semibold">Category:</span> @EnumHelper.ToDisplayString(item.CategoryProduct)</p>
                        <p><span class="font-semibold">Minimum bid price:</span> $@item.MinBidPrice.ToString("#,##0.00")</p>
                        <p><span class="font-semibold">Status:</span> @EnumHelper.ToDisplayString(item.Status)</p>
                        <p><span class="font-semibold">Start time:</span> @DateTimeExtension.ConvertUtcToVNTime(item.StartTime).ToString("dd/MM/yyyy HH:mm:ss")</p>
                        <p><span class="font-semibold">Seller:</span> @item.Seller.DisplayName</p>
                        <p><span class="font-semibold">End time:</span> @DateTimeExtension.ConvertUtcToVNTime(item.EndTime).ToString("dd/MM/yyyy HH:mm:ss")</p>
                    </div>
                </div>

                <!-- Bid Form -->
                <div class="mt-8 bg-gray-50 rounded p-4">
                    <h3 class="text-lg font-semibold mb-2">Bid Now</h3>
                    <p class="text-sm text-gray-600 mb-4">Bid Amount: Minimum $@item.MinBidPrice.ToString("#,##0.00")</p>
                    <form id="bid-form" asp-page-handler="Bid" method="post">
                        <input type="number" id="bid-input" name="AmountBid" placeholder="$00.00" class="w-full border px-3 py-2 rounded mb-4" />
                        <input type="hidden" name="ItemId" value="@item.Id" />
                        <p class="text-sm text-red-600 hidden" id="error-message">Your bid must be at least $xxx</p>
                        <button class="w-full bg-black text-white py-2 rounded hover:bg-gray-800" type="submit">PLACE BID</button>
                    </form>
                </div>

                <div class="bg-white rounded-lg p-6 shadow-lg mb-6 mt-6">
                    <h2 class="text-2xl font-bold">BIDDING HISTORY — —</h2>
                    <div class="mt-4">
                        @if (item.Bids.Count() == 0)
                        {
                            <p class="font-semibold">Have no auction history yet</p>
                        }
                        else
                        {
                            foreach (var bid in item.Bids.OrderByDescending(b => b.CreatedAt))
                            {
                                <div class="flex items-center mb-4">
                                    <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRhplEXPpWAYGxIkic17JzVWJVdgDyW16y8kw&s" alt="@bid.Bidder.UserName" class="w-10 h-10 rounded-full mr-3">
                                    <div>
                                        <p class="font-semibold">@bid.Bidder.DisplayName</p>
                                        <p class="text-gray-600">
                                            @DateTimeExtension.ConvertUtcToVNTime(bid.CreatedAt).ToString("dd/MM/yyyy HH:mm:ss")
                                            -
                                            <span class="font-semibold">$@bid.Amount.ToString("#,##0.00")</span>
                                        </p>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>

            </div>
        </div>
    </div>
    <!-- Comment Section -->
    <div class="bg-white rounded-lg p-6 shadow-lg mt-6" id="comment-section">
        <h2 class="text-xl font-semibold mb-4">Live Comments</h2>

        <!-- Danh sách bình luận -->
        <div id="comment-list"
             class="h-64 overflow-y-auto flex flex-col space-y-3 pr-2 border rounded p-3 bg-gray-50 text-sm scroll-smooth">
            <!-- Các comment sẽ append vào đây -->
        </div>

        <!-- Load more -->
        <div class="text-center mt-3">
            <div id="load-more-comments"
                 class="w-0 h-0 d-none">
            </div>
        </div>

        <!-- Gửi bình luận -->
        <div class="mt-4 flex items-start gap-2">
            <textarea id="comment-input"
                      rows="2"
                      class="flex-1 border rounded px-3 py-2 text-sm resize-none"
                      placeholder="Write a comment..."></textarea>
            <button id="send-comment"
                    class="bg-black text-white py-2 px-4 rounded hover:bg-gray-800 text-sm">
                Send
            </button>
        </div>
    </div>


    <!-- Related Auctions (Simple Card Style) -->
    <div class="mt-10">
        <h3 class="text-xl font-semibold mb-4">Related Auctions</h3>
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8">
            @if (Model.AuctionItems.Count() > 0)
            {
                foreach (var auctionItem in Model.AuctionItems)
                {
                    var timerIdAuctionItem = $"timer-{auctionItem.Id}";
                    var endEpochAuctionItem = ((DateTimeOffset)DateTime.SpecifyKind(auctionItem.EndTime, DateTimeKind.Utc)).ToUnixTimeMilliseconds();

                    <div class="auction-card">
                        <!-- title & price -->
                        <div class="card-header">
                            <h2 class="item-title">@auctionItem.Title</h2>
                            <p class="item-price">$@auctionItem.StartPrice.ToString("#,##0.00")</p>
                        </div>

                        <!-- image -->
                        <div class="card-image">
                            <img src="@(auctionItem.ImageUrls[0])" alt="@auctionItem.Title" class="item-img" />
                            @* <div class="item-id">ID: @auctionItem.Id</div> *@
                        </div>

                        <!-- bid info -->
                        <div class="card-bid-info">
                            <div>
                                <p class="bid-label">Current Bid</p>
                                <p class="bid-value">$@auctionItem.StartPrice.ToString("#,##0.00")</p>
                            </div>
                            <div class="bid-timer">
                                <p id="@timerIdAuctionItem" data-end="@endEpochAuctionItem" class="timer-text">-- : -- : --</p>
                                <p class="timer-label">Waiting For Bid</p>
                            </div>
                        </div>

                        <div class="submit-container">
                            <a class="submit-btn btn btn-dark" href="/Auction/Details/@auctionItem.Id">Submit A Bid</a>
                        </div>

                    </div>

                }
            }
        </div>
    </div>
</div>
<!-- Confirmation Modal -->
<div id="confirmBidModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
    <div class="bg-white p-6 rounded shadow-lg w-96">
        <h2 class="text-xl font-semibold mb-4">Confirm Your Bid</h2>
        <p class="mb-4">Are you sure you want to place this bid?</p>
        <div class="flex justify-end gap-2">
            <button id="cancelBidBtn" class="bg-gray-300 hover:bg-gray-400 text-black px-4 py-2 rounded">Cancel</button>
            <button id="confirmBidBtn" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded">Confirm</button>
        </div>
    </div>
</div>
@if (showErrorModal)
{
    <div id="errorModal"
         class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50"
         x-data="{ show: true }"
         x-init="
             $watch('show', value=>
            value ? $el.classList.remove('hidden') : $el.classList.add('hidden'));
            window.addEventListener('show-error-modal', e => {
            document.getElementById('errorModalMessage').textContent = e.detail;
            show = true;
            });
        "
         x-show="show"
         x-init="setTimeout(() => show = false, 5000)">
        <div class="bg-white rounded-lg shadow-lg max-w-sm w-full p-6">
            <div class="flex items-start justify-between">
                <h3 class="text-lg font-semibold text-red-600">Access Error</h3>
                <button class="text-gray-500 hover:text-gray-800" @@click="show = false">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none"
                         viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                              d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>
            <div class="mt-4 text-gray-700" id="errorModalMessage">
                @errorMessage
            </div>
            <div class="mt-6 text-right">
                <button class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700"
                        @@click="show = false">
                    Close
                </button>
            </div>
        </div>
    </div>
}
<script src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js" defer></script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
<audio id="win-audio" src="/sounds/victory.mp3" preload="auto"></audio>
<script>
    @* ChinhLV - SignalR listen add new bid event *@
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/BidHub")
        .build();

    connection.on("ReceiveBidAdd", function (itemId) {
        const currentItemId = "@item.Id";
        if (itemId === currentItemId) {
        fetch(`/Auction/Details/@item.Id?handler=BidInfo`)
            .then(res => res.json())
            .then(data => {
                // Cập nhật giá hiện tại
                const priceEl = document.getElementById("current-price");
                priceEl.textContent = `$${data.current}`;
                priceEl.dataset.current = data.current;

                // Cập nhật bidding history
                const historyEl = document.querySelector(".bg-white.rounded-lg.p-6.shadow-lg.mb-6.mt-6 .mt-4");
                historyEl.innerHTML = "";

                if (data.bids.length === 0) {
                    historyEl.innerHTML = `<p class="font-semibold">Have no auction history yet</p>`;
                } else {
                    data.bids.forEach(bid => {
                        historyEl.innerHTML += `
                            <div class="flex items-center mb-4">
                                <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRhplEXPpWAYGxIkic17JzVWJVdgDyW16y8kw&s" class="w-10 h-10 rounded-full mr-3">
                                <div>
                                    <p class="font-semibold">${bid.name}</p>
                                    <p class="text-gray-600">
                                        ${bid.created} - <span class="font-semibold">$${bid.amount}</span>
                                    </p>
                                </div>
                            </div>`;
                    });
                }

                console.log("Updated client without reloading.");
            })
            .catch(err => console.error("Failed to fetch updated bid:", err));
    }
    });

    connection.start().catch(err => console.error(err.toString()));

    @* ChinhLV - Validate trước khi submit bid *@
    document.getElementById("bid-form").addEventListener("submit", function (e) {
        const bidInput = document.getElementById("bid-input");
        const errorMessage = document.getElementById("error-message");
        const priceElement = document.getElementById("current-price");

        const current = parseFloat(priceElement.dataset.current);
        const minBid = parseFloat(priceElement.dataset.minbid);
        const requiredMin = current + minBid;

        const entered = parseFloat(bidInput.value);

        if (isNaN(entered) || entered < requiredMin) {
            e.preventDefault();
            errorMessage.textContent = `Your bid must be at least $${requiredMin.toFixed(2)}`;
            errorMessage.classList.remove("hidden");
            bidInput.classList.add("border-red-500");
        } else {
            e.preventDefault();
            errorMessage.classList.add("hidden");
            bidInput.classList.remove("border-red-500");

            document.getElementById("confirmBidModal").classList.remove("hidden");
        }

    });
    @* Xác nhận bid modal *@
        document.getElementById("cancelBidBtn").addEventListener("click", function () {
        document.getElementById("confirmBidModal").classList.add("hidden");
    });

    document.getElementById("confirmBidBtn").addEventListener("click", function () {
        document.getElementById("confirmBidModal").classList.add("hidden");
        document.getElementById("bid-form").submit();
    });


    document.addEventListener('DOMContentLoaded', () => {
        // Countdown
        document.querySelectorAll('[data-end]').forEach(el => {
            const endTime = Number(el.dataset.end);
            startCountdown(endTime, el.id);
        });

        // Tabs
        const tabButtons = document.querySelectorAll('.tab-btn');
        const tabPanels = document.querySelectorAll('.tab-panel');

        tabButtons.forEach(btn => {
            btn.addEventListener('click', () => {
                const tab = btn.getAttribute('data-tab');
                tabPanels.forEach(panel => {
                    panel.classList.add('hidden');
                });
                document.getElementById(`tab-${tab}`).classList.remove('hidden');

                tabButtons.forEach(b => b.classList.remove('border-b-2', 'border-black', 'text-black'));
                btn.classList.add('border-b-2', 'border-black', 'text-black');
            });
        });

        // Default active tab
        tabButtons[0].click();
    });

    function startCountdown(endTime, elementId) {
        function update() {
            const now = Date.now();
            const diff = endTime - now;
            const el = document.getElementById(elementId);

            if (!el) return;

            if (diff <= 0) {
                el.textContent = "00 : 00 : 00";
                clearInterval(interval);
                return;
            }

            const h = String(Math.floor(diff / 3_600_000)).padStart(2, '0');
            const m = String(Math.floor((diff % 3_600_000) / 60_000)).padStart(2, '0');  
            const s = String(Math.floor((diff % 60_000) / 1_000)).padStart(2, '0');
            el.textContent = `${h} : ${m} : ${s}`;
        }
        update();
        const interval = setInterval(update, 1000);
    }

    const thumbnails = document.querySelectorAll('.thumbnail');
    const mainImage = document.getElementById('main-image');
    const nextButton = document.getElementById('next');
    const prevButton = document.getElementById('prev');

    let currentIndex = 0;

    // Thumbnails click event
    thumbnails.forEach((thumbnail, index) => {
        thumbnail.addEventListener('click', () => {
            currentIndex = index;
            updateMainImage();
        });
    });

    // Update main image based on current index
    function updateMainImage() {
        const selectedThumbnail = thumbnails[currentIndex];
        mainImage.src = selectedThumbnail.src;
    }

    // Next button functionality
    nextButton.addEventListener('click', () => {
        currentIndex = (currentIndex + 1) % thumbnails.length;
        updateMainImage();
    });

    // Prev button functionality
    prevButton.addEventListener('click', () => {
        currentIndex = (currentIndex - 1 + thumbnails.length) % thumbnails.length;
        updateMainImage();
    });

    @* GiangCM - connect signalR and lazy loading *@
    const auctionId = "@item.Id";
    const userName = "@(User.Identity?.Name ?? "Guest")";
    let currentPage = 1;

        if (auctionId && userName) {
        const commentConnection = new signalR.HubConnectionBuilder()
            .withUrl(`/CommentHub?auctionId=${auctionId}`)
            .build();

        commentConnection.on("ReceiveComment", (user, message, time) => {
            appendComment(user, message, time);
        });
        commentConnection.on("CommentError", (errorMessage) => {
            showModalError(errorMessage);
        });

        commentConnection.start().catch(err => console.error(err.toString()));

        document.getElementById("send-comment").addEventListener("click", () => {
            const message = document.getElementById("comment-input").value;
            if (message.trim() !== "") {
                commentConnection.invoke("SendComment", auctionId, userName, message)
                    .catch(err => console.error(err.toString()));
                document.getElementById("comment-input").value = "";
            }
        });
    }


    document.getElementById("load-more-comments").addEventListener("click", () => {
        loadComments(++currentPage);
    });

    function appendComment(user, message, time) {
        const div = document.createElement("div");
        div.innerHTML = `
            <div class="bg-white border border-gray-200 rounded px-3 py-2 shadow text-gray-800">
                <div class="flex justify-between items-center">
                    <span class="font-semibold text-sm">${user}</span>
                    <span class="text-xs text-gray-500">${time}</span>
                </div>
                <p class="text-sm mt-1">${message}</p>
            </div>
        `;

        const list = document.getElementById("comment-list");
        list.appendChild(div);

        // Scroll xuống dòng mới nhất
        list.scrollTop = list.scrollHeight;
    }
        function showModalError(message) {
        const event = new CustomEvent("show-error-modal", {
            detail: message
        });
        window.dispatchEvent(event);
    }
    @* ChinhLV - Realtime winning *@
        const auctionProductConnection = new signalR.HubConnectionBuilder()
        .withUrl(`/AuctionProductHub?auctionId=${auctionId}`)
        .build();

    auctionProductConnection.on("AuctionEnded", (winnerName, productName) => {
        const message = `Congratulations ${winnerName} for winning the auction for product ${productName}!`;
        console.log(message);
    });

    auctionProductConnection.start()
        .then(() => console.log("Connected to AuctionProductHub"))
        .catch(err => console.error("AuctionProductHub error:", err));



    function loadComments(page) {
        fetch(`/Auction/Details/${auctionId}?handler=Comments&auctionId=${auctionId}&page=${page}`)
            .then(res => res.json())
            .then(data => {
                if (data.length === 0) {
                    document.getElementById("load-more-comments").disabled = true;
                    document.getElementById("load-more-comments").innerText = "No more comments";
                }
                data.forEach(c => appendComment(c.user, c.message, c.createAt));
            });
    }
    loadComments(currentPage);
</script>
