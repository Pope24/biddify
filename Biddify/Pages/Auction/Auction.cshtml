@page "/Auction"
@model Biddify.Pages.Auction.AuctionModel
@{
    ViewData["Title"] = "Auction";
    Layout = "~/Pages/Shared/_Layout.cshtml";
}

@section FullWidthHeader {
    <!-- Banner Section -->
    <div class="banner-wrapper">
        <img src="https://demo-egenslab.b-cdn.net/html/bidgen/preview/assets/images/banner/breadcrumb-bg.png"
             class="banner-image"
             alt="Auction Banner" />
        <div class="banner-content">
            <h1 class="banner-title">Auction</h1>
            <p class="banner-breadcrumb flex item-center">
                <a href="/" class="banner-link">
                    <span class="flex item-center justify-content-center gap-2">
                        Home
                    </span>
                </a> / Auction
            </p>
        </div>
    </div>
}

<!-- Filter Section -->
<div class="container mx-auto px-4 py-5">
    <form method="get" class="mb-5 p-6 bg-white rounded-lg shadow-md border border-gray-100">
        <h2 class="text-xl font-semibold text-gray-800 mb-4">Filter Auctions</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-5">
            <!-- Search Filter -->
            <div class="relative">
                <label for="SearchTerm" class="block text-sm font-medium text-gray-700 mb-2">Search</label>
                <div class="relative">
                    <input type="text" 
                           class="w-full pl-10 pr-4 py-3 rounded-lg border border-gray-200 bg-gray-50 focus:bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:border-transparent transition-colors" 
                           id="SearchTerm" name="SearchTerm" 
                           value="@Model.SearchTerm" placeholder="Search auctions...">
                    <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                        <i class="bi bi-search text-gray-400"></i>
                    </div>
                </div>
            </div>

            <!-- Category Filter -->
            <div>
                <label for="CategoryFilter" class="block text-sm font-medium text-gray-700 mb-2">Category</label>
                <div class="relative">
                    <select class="w-full appearance-none pl-4 pr-10 py-3 rounded-lg border border-gray-200 bg-gray-50 focus:bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:border-transparent transition-colors" 
                            id="CategoryFilter" name="CategoryFilter" asp-items="Model.CategorySelectList">
                        <option value="">All Categories</option>
                    </select>
                    <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                        <i class="bi bi-chevron-down text-gray-400"></i>
                    </div>
                </div>
            </div>

            <!-- Status Filter -->
            <div>
                <label for="StatusFilter" class="block text-sm font-medium text-gray-700 mb-2">Status</label>
                <div class="relative">
                    <select class="w-full appearance-none pl-4 pr-10 py-3 rounded-lg border border-gray-200 bg-gray-50 focus:bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:border-transparent transition-colors" 
                            id="StatusFilter" name="StatusFilter" asp-items="Model.StatusSelectList">
                        <option value="">All Statuses</option>
                    </select>
                    <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                        <i class="bi bi-chevron-down text-gray-400"></i>
                    </div>
                </div>
            </div>

            <!-- Time Filter -->
            <div>
                <label for="TimeFilter" class="block text-sm font-medium text-gray-700 mb-2">Time</label>
                <div class="relative">
                    <select class="w-full appearance-none pl-4 pr-10 py-3 rounded-lg border border-gray-200 bg-gray-50 focus:bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:border-transparent transition-colors" 
                            id="TimeFilter" name="TimeFilter" asp-items="Model.TimeSelectList">
                    </select>
                    <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                        <i class="bi bi-chevron-down text-gray-400"></i>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Filter Buttons -->
        <div class="mt-6 flex flex-col sm:flex-row sm:justify-end gap-3">
            <a href="/Auction" class="order-2 sm:order-1 px-5 py-3 border border-gray-300 rounded-lg text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 transition-colors text-center">
                <i class="bi bi-x-circle me-2"></i> Clear Filters
            </a>
            <button type="submit" class="order-1 sm:order-2 px-5 py-3 bg-gray-800 text-white rounded-lg hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 transition-colors">
                <i class="bi bi-filter me-2"></i> Apply Filters
            </button>
        </div>
    </form>
</div>

<!-- Auction List -->
<div class="container mx-auto px-4 pb-[35rem]">
    @if (!Model.AuctionItems.Any())
    {
        <div class="text-center py-16 bg-white rounded-lg shadow-sm">
            <i class="bi bi-search text-gray-400 text-6xl"></i>
            <h3 class="mt-4 text-2xl font-medium text-gray-900">No auctions found</h3>
            <p class="mt-3 text-gray-500 max-w-md mx-auto">Try adjusting your search criteria or clear filters to see all available auctions.</p>
        </div>
    }
    else
    {
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8">
            @foreach (var item in Model.AuctionItems)
            {
                var timerId = $"timer-{item.Id}";
                var endEpoch = ((DateTimeOffset)DateTime.SpecifyKind(item.EndTime, DateTimeKind.Utc)).ToUnixTimeMilliseconds();

                <div class="auction-card">
                    <!-- title & price -->
                    <div class="card-header">
                        <h2 class="item-title">@item.Title</h2>
                        <p class="item-price">$@item.StartPrice.ToString("#,##0.00")</p>
                    </div>

                    <!-- image -->
                    <div class="card-image">
                        <img src="@(item.ImageUrls[0])" alt="@item.Title" class="item-img" />
                    </div>

                    <!-- bid info -->
                    <div class="card-bid-info">
                        <div>
                            <p class="bid-label">Current Bid</p>
                            <p class="bid-value">$@item.StartPrice.ToString("#,##0.00")</p>
                            <p class="bid-label">Status: 
                                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium @GetStatusClasses(item.Status)">
                                    @item.Status
                                </span>
                            </p>
                            <p class="bid-label">Category: 
                                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                    @item.CategoryProduct
                                </span>
                            </p>
                        </div>
                        <div class="bid-timer">
                            <p id="@timerId" data-end="@endEpoch" class="timer-text">-- : -- : --</p>
                            <p class="timer-label">Waiting For Bid</p>
                        </div>
                    </div>

                    <div class="submit-container">
                        <a class="submit-btn btn btn-dark" href="/Auction/Details/@item.Id">Submit A Bid</a>
                    </div>
                </div>
            }
        </div>
        
        <!-- Pagination -->
        @if (Model.TotalPages > 1)
        {
            <div class="flex justify-center mt-10">
                <nav class="flex items-center">
                    @{
                        // Determine the range of pages to display
                        const int maxPagesToShow = 5;
                        int startPage = Math.Max(1, Model.CurrentPage - maxPagesToShow / 2);
                        int endPage = Math.Min(Model.TotalPages, startPage + maxPagesToShow - 1);
                        
                        // Adjust start page if we're near the end
                        if (endPage - startPage + 1 < maxPagesToShow)
                        {
                            startPage = Math.Max(1, endPage - maxPagesToShow + 1);
                        }
                    }
                    
                    <!-- Previous page -->
                    @if (Model.CurrentPage > 1)
                    {
                        <a href="/Auction?CurrentPage=@(Model.CurrentPage - 1)@(string.IsNullOrEmpty(Model.SearchTerm) ? "" : $"&SearchTerm={Model.SearchTerm}")@(Model.StatusFilter.HasValue ? $"&StatusFilter={Model.StatusFilter}" : "")@(Model.CategoryFilter.HasValue ? $"&CategoryFilter={Model.CategoryFilter}" : "")@(string.IsNullOrEmpty(Model.TimeFilter) ? "" : $"&TimeFilter={Model.TimeFilter}")" 
                           class="px-3 py-2 rounded-md border border-gray-300 bg-white text-gray-700 hover:bg-gray-50 mr-2">
                            <i class="bi bi-chevron-left"></i>
                        </a>
                    }
                    else
                    {
                        <span class="px-3 py-2 rounded-md border border-gray-200 bg-gray-100 text-gray-400 mr-2 cursor-not-allowed">
                            <i class="bi bi-chevron-left"></i>
                        </span>
                    }
                    
                    <!-- First page (if not in range) -->
                    @if (startPage > 1)
                    {
                        <a href="/Auction?CurrentPage=1@(string.IsNullOrEmpty(Model.SearchTerm) ? "" : $"&SearchTerm={Model.SearchTerm}")@(Model.StatusFilter.HasValue ? $"&StatusFilter={Model.StatusFilter}" : "")@(Model.CategoryFilter.HasValue ? $"&CategoryFilter={Model.CategoryFilter}" : "")@(string.IsNullOrEmpty(Model.TimeFilter) ? "" : $"&TimeFilter={Model.TimeFilter}")" 
                           class="px-3 py-2 rounded-md border border-gray-300 bg-white text-gray-700 hover:bg-gray-50 mr-2">
                            1
                        </a>
                        @if (startPage > 2)
                        {
                            <span class="px-2 py-1 text-gray-500">...</span>
                        }
                    }
                    
                    <!-- Page numbers -->
                    @for (int i = startPage; i <= endPage; i++)
                    {
                        if (i == Model.CurrentPage)
                        {
                            <span class="px-3 py-2 rounded-md bg-gray-800 text-white mr-2">
                                @i
                            </span>
                        }
                        else
                        {
                            <a href="/Auction?CurrentPage=@i@(string.IsNullOrEmpty(Model.SearchTerm) ? "" : $"&SearchTerm={Model.SearchTerm}")@(Model.StatusFilter.HasValue ? $"&StatusFilter={Model.StatusFilter}" : "")@(Model.CategoryFilter.HasValue ? $"&CategoryFilter={Model.CategoryFilter}" : "")@(string.IsNullOrEmpty(Model.TimeFilter) ? "" : $"&TimeFilter={Model.TimeFilter}")" 
                               class="px-3 py-2 rounded-md border border-gray-300 bg-white text-gray-700 hover:bg-gray-50 mr-2">
                                @i
                            </a>
                        }
                    }
                    
                    <!-- Last page (if not in range) -->
                    @if (endPage < Model.TotalPages)
                    {
                        @if (endPage < Model.TotalPages - 1)
                        {
                            <span class="px-2 py-1 text-gray-500">...</span>
                        }
                        <a href="/Auction?CurrentPage=@Model.TotalPages@(string.IsNullOrEmpty(Model.SearchTerm) ? "" : $"&SearchTerm={Model.SearchTerm}")@(Model.StatusFilter.HasValue ? $"&StatusFilter={Model.StatusFilter}" : "")@(Model.CategoryFilter.HasValue ? $"&CategoryFilter={Model.CategoryFilter}" : "")@(string.IsNullOrEmpty(Model.TimeFilter) ? "" : $"&TimeFilter={Model.TimeFilter}")" 
                           class="px-3 py-2 rounded-md border border-gray-300 bg-white text-gray-700 hover:bg-gray-50 mr-2">
                            @Model.TotalPages
                        </a>
                    }
                    
                    <!-- Next page -->
                    @if (Model.CurrentPage < Model.TotalPages)
                    {
                        <a href="/Auction?CurrentPage=@(Model.CurrentPage + 1)@(string.IsNullOrEmpty(Model.SearchTerm) ? "" : $"&SearchTerm={Model.SearchTerm}")@(Model.StatusFilter.HasValue ? $"&StatusFilter={Model.StatusFilter}" : "")@(Model.CategoryFilter.HasValue ? $"&CategoryFilter={Model.CategoryFilter}" : "")@(string.IsNullOrEmpty(Model.TimeFilter) ? "" : $"&TimeFilter={Model.TimeFilter}")" 
                           class="px-3 py-2 rounded-md border border-gray-300 bg-white text-gray-700 hover:bg-gray-50">
                            <i class="bi bi-chevron-right"></i>
                        </a>
                    }
                    else
                    {
                        <span class="px-3 py-2 rounded-md border border-gray-200 bg-gray-100 text-gray-400 cursor-not-allowed">
                            <i class="bi bi-chevron-right"></i>
                        </span>
                    }
                </nav>
            </div>
        }
    }
</div>

@functions {
    private string GetStatusClasses(Domain.Enums.EAuctionStatus status)
    {
        return status switch
        {
            Domain.Enums.EAuctionStatus.PendingApproval => "bg-yellow-100 text-yellow-800",
            Domain.Enums.EAuctionStatus.Active => "bg-green-100 text-green-800",
            Domain.Enums.EAuctionStatus.Ended => "bg-gray-100 text-gray-800",
            Domain.Enums.EAuctionStatus.Cancelled => "bg-red-100 text-red-800",
            _ => "bg-gray-100 text-gray-800"
        };
    }
}

<!-- Countdown JS -->
<script>
    document.addEventListener('DOMContentLoaded', () => {
        document.querySelectorAll('[data-end]').forEach(el => {
            const endTime = Number(el.dataset.end);
            startCountdown(endTime, el.id);
        });
    });

    function startCountdown(endTime, elementId) {
        console.log(elementId);
        function update() {
            const now = Date.now();
            const diff = endTime - now;

            if (diff <= 0) {
                document.getElementById(elementId).textContent = "00 : 00 : 00";
                const label = document.getElementById(elementId).nextElementSibling;
                if (label) {
                    label.textContent = "Expired";
                    label.classList.add("text-red-500", "font-semibold");
                }
                clearInterval(interval);
                return;
            }
            const h = String(Math.floor(diff / 3_600_000)).padStart(2, '0');
            const m = String(Math.floor(diff % 3_600_000 / 60_000)).padStart(2, '0');
            const s = String(Math.floor(diff % 60_000 / 1_000)).padStart(2, '0');
            document.getElementById(elementId).textContent = `${h} : ${m} : ${s}`;
        }
        update();
        const interval = setInterval(update, 1000);
    }
</script>
