
@page
@model Domain.Models.ChatMessageModel


<button id="chatToggleBtn"
        onclick="toggleChat()"
        class="w-[60px] h-[60px] fixed bottom-4 right-4 z-50 rounded-full bg-gray-700 shadow-xl hover:bg-black flex items-center justify-center">
    <span id="chatIcon" class="material-symbols-outlined text-white text-3xl">chat_bubble</span>
</button>


<div id="chatBox"
     class="fixed bottom-24 right-4 w-1/4 min-w-[450px] h-[calc(100vh-200px)] bg-white text-white rounded shadow-lg overflow-hidden z-50 flex flex-col
     opacity-0 scale-0 pointer-events-none origin-bottom-right transition-all duration-300 ease-out">





    <div class="bg-gray-700 text-white px-4 py-3 font-semibold flex justify-between items-center">
        Support Chat
        <button onclick="toggleChat()" class="text-white text-xl">&times;</button>
    </div>


    <div id="faqContainer" class="flex-1 overflow-y-auto p-4 text-sm bg-white ">
        <!-- Nội dung động -->
    </div>


    <!-- Wrapper input -->
    <div id="inputChat"
         class="flex mx-2 my-2 items-center px-3 py-2 border-2 border-gray-400 rounded-full transition-all duration-200 focus-within:border-indigo-500 hover:border-indigo-500 group">

       
        <input id="chatInput"
               type="text"
               placeholder="Message..."
               class="flex-grow bg-transparent text-sm text-gray-800 placeholder-gray-500 focus:outline-none" />

       
        <button onclick="sendMessage()"
                class="ml-2 w-10 h-10 flex items-center justify-center rounded-full bg-gray-100 group-hover:bg-indigo-500 transition-all duration-200">
            <span class="material-symbols-outlined ml-1  text-gray-600 group-hover:text-white transition">send</span>
        </button>

    </div>

    
</div>

</div>



<script>
    const CHAT_API = '/api/chatbot';
    let state = {
        level: 'root',
        group: null
    };

    function toggleChat() {
        const chatBox = document.getElementById('chatBox');
        const icon = document.getElementById('chatIcon');
        const isOpen = chatBox.classList.contains('scale-100');

        if (isOpen) {
       
            chatBox.classList.remove('opacity-100', 'scale-100');
            chatBox.classList.add('opacity-0', 'scale-0', 'pointer-events-none');
            icon.textContent = 'chat_bubble';
        } else {
           
            chatBox.classList.remove('opacity-0', 'scale-0', 'pointer-events-none');
            chatBox.classList.add('opacity-100', 'scale-100');
            icon.textContent = 'close';
            loadRootMenu();
        }
    }



    function loadRootMenu() {
        state = { level: 'root', group: null };
        const container = document.getElementById('faqContainer');
        container.innerHTML = `
      <!-- Phần chào hỏi -->
    <div class="text-center text-black flex flex-col items-center justify-center mb-6 mt-6">
        <div class="font-extrabold text-3xl flex items-center">
            Hello   
            <span class="material-symbols-outlined text-yellow-400 mb-1 ml-1">waving_hand</span>
        </div>
        <div class="text-gray-600 mt-1 text-base">How we can help you?</div>
    </div>

    <!-- Các nút lựa chọn -->
    <div class="flex flex-col items-center space-y-4 mt-8">
        <!-- Nút FAQ -->
    <button onclick="loadFaqTitles()"
        class="group flex items-center justify-between bg-gray-700 hover:bg-gray-600 rounded-lg px-4 py-2 shadow-md hover:shadow-lg text-white cursor-pointer w-full max-w-sm transition-all duration-200">

            <span class="font-semibold text-base">FAQ Questions</span>
            <svg class="w-8 h-12 text-indigo-600 ml-2 group-hover:text-indigo-800" fill="currentColor" viewBox="0 0 24 24">
                <path d="M10 17l5-5-5-5v10z" />
            </svg>
        </button>

        <!-- Nút Chat AI -->
        <button onclick="startAiChat()"
            class="group flex items-center justify-between bg-white rounded-lg px-4 py-2 shadow-md hover:shadow-lg text-black cursor-pointer w-full max-w-sm transition-all duration-200 hover:text-purple-700">
            <span class="font-semibold text-base">Send message with AI</span>
            <svg class="w-8 h-12 text-indigo-600 ml-2 group-hover:text-indigo-800" fill="currentColor" viewBox="0 0 24 24">
                <path d="M10 17l5-5-5-5v10z" />
            </svg>
        </button>
    </div>



        `;
        hideInput();
    }

      


          async function loadFaqTitles() {
        try {
            const container = document.getElementById('faqContainer');
            container.innerHTML = ''; // Xoá toàn bộ trước đó

            // Bot hỏi: bạn muốn chọn chủ đề nào?
            const botMsg = document.createElement('div');
            botMsg.className = 'flex justify-start mb-2';
              botMsg.innerHTML = `
        <div class="bg-gray-700 text-gray-100 px-4 py-2 rounded-2xl max-w-[80%] text-sm">
          Choose your title you want!
        </div>
    `;

            container.appendChild(botMsg);

            const response = await fetch(CHAT_API, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ message: 'faq_titles' })
            });

            if (!response.ok) throw new Error(await response.text());
            const titles = await response.json();
            state.level = 'group';

            titles.response.forEach(title => {
                const safeTitle = title.replace(/'/g, "\\'");
                const titleBtn = document.createElement('div');
                titleBtn.className = 'flex justify-end mb-2';
                titleBtn.innerHTML = `
        <div onclick="loadQuestions('${safeTitle}')"
             class="bg-indigo-600 text-white px-4 py-2 rounded-2xl max-w-[80%] text-sm cursor-pointer hover:bg-indigo-700 transition">
            ${title}
        </div>
    `;

                container.appendChild(titleBtn);
            });

            hideInput();
        } catch (error) {
            alert("Lỗi khi tải danh sách FAQ: " + error.message);
            console.error(error);
        }
    }

        async function loadQuestions(groupName) {
        try {
            state.level = 'question';
            state.group = groupName;

            const container = document.getElementById('faqContainer');
      
              const rightBubbles = container.querySelectorAll('.flex.justify-end');
            rightBubbles.forEach(bubble => {
                const div = bubble.querySelector('div');
                if (div?.getAttribute('onclick')?.includes('loadQuestions')) {
                    bubble.remove();
                }
            });
            // Bubble người dùng: chọn tiêu đề
            const userTitle = document.createElement('div');
            userTitle.className = 'flex justify-end mb-2';
            userTitle.innerHTML = `
               <div class="bg-indigo-600 text-white px-4 py-2 rounded-2xl max-w-[80%] text-sm">
                    ${groupName}
                </div>
            `;
            container.appendChild(userTitle);

            // Bot nhắc: hãy chọn câu hỏi
            const botMsg = document.createElement('div');
            botMsg.className = 'flex justify-start mb-2';
            botMsg.innerHTML = `
        <div class="bg-gray-700 text-gray-100 px-4 py-2 rounded-2xl  max-w-[80%] text-sm">
          Pick a quesstion 
        </div>
    `;

            container.appendChild(botMsg);

            // Load câu hỏi
            const response = await fetch(CHAT_API, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ message: 'faq_get:' + groupName })
            });

            if (!response.ok) throw new Error(await response.text());
            const result = await response.json();

            result.response.forEach(item => {
                if (!item?.question) return;
                const safeQuestion = item.question.replace(/'/g, "\\'");
                const questionEl = document.createElement('div');
                questionEl.className = 'flex justify-end mb-2';
                  questionEl.innerHTML = `
        <div onclick="showAnswer('${safeQuestion}')"
           class="bg-indigo-600 text-white px-4 py-2 rounded-2xl max-w-[80%] text-sm cursor-pointer hover:bg-indigo-700 transition">
        ${item.question}
        </div>
    `;

                container.appendChild(questionEl);
            });

            container.scrollTop = container.scrollHeight;
            hideInput();
        } catch (error) {
            alert("Lỗi khi tải câu hỏi: " + error.message);
            console.error(error);
        }
    }






        async function showAnswer(question) {
        try {
            const container = document.getElementById('faqContainer');

            // Xoá các câu hỏi cũ đang hiển thị (bên phải)
            const rightBubbles = container.querySelectorAll('.flex.justify-end');
            rightBubbles.forEach(bubble => {
                const div = bubble.querySelector('div');
                if (div?.getAttribute('onclick')?.includes('showAnswer')) {
                    bubble.remove();
                }
            });

            // Hiện câu hỏi như người dùng
            const userMsg = document.createElement('div');
            userMsg.className = 'flex justify-end mb-2';
         // Ví dụ thay bg-purple-600 bằng bg-blue-600
    userMsg.innerHTML = `
        <div class="bg-indigo-600 text-white px-4 py-2 rounded-2xl max-w-[80%] text-sm">
            ${question}
        </div>
    `;

            container.appendChild(userMsg);
            container.scrollTop = container.scrollHeight;

            const response = await fetch(CHAT_API, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ message: question })
            });

            if (!response.ok) throw new Error(await response.text());
            const result = await response.json();

            // Hiện câu trả lời
            const botMsg = document.createElement('div');
            botMsg.className = 'flex justify-start mb-2';
              botMsg.innerHTML = `
        <div class="bg-gray-700 text-gray-100 px-4 py-2 rounded-2xl max-w-[80%] text-sm">
            ${result.response}
        </div>
    `;

            container.appendChild(botMsg);

            // Thêm 2 bong bóng tuỳ chọn: quay lại title và quay lại trang chính
            const backToTitles = document.createElement('div');
            backToTitles.className = 'flex justify-start mb-2';
              backToTitles.innerHTML = `
        <div onclick="loadFaqTitles()"
             class="mt-4 flex items-center space-x-2 bg-gray-700 text-white px-4 py-2 rounded-2xl max-w-[80%] text-sm cursor-pointer hover:bg-gray-600 transition">
            <span class="material-symbols-outlined text-base">low_priority</span>
            <span>Go back title</span>
        </div>
    `;

            container.appendChild(backToTitles);

            const backToHome = document.createElement('div');
            backToHome.className = 'flex justify-start mb-2';
            backToHome.innerHTML = `
        <div onclick="loadRootMenu()"
             class=" mt-2 flex items-center space-x-2 bg-gray-700 text-white px-4 py-2 rounded-2xl max-w-[80%] text-sm cursor-pointer hover:bg-gray-600 transition">
            <span class="material-symbols-outlined text-base">low_priority</span>
            <span>Go back home</span>
        </div>
    `;
            container.appendChild(backToHome);

            container.scrollTop = container.scrollHeight;
        } catch (error) {
            alert("Lỗi khi hiển thị câu trả lời: " + error.message);
            console.error(error);
        }
    }




        function selectTitle(el, title) {
        // Bỏ chọn tất cả tiêu đề
        document.querySelectorAll('.faq-title').forEach(btn => {
            btn.classList.remove('bg-gray-700', 'text-white');
            btn.classList.add('bg-white', 'text-black');
        });

        // Đánh dấu đã chọn
        el.classList.remove('bg-white', 'text-black');
        el.classList.add('bg-gray-700', 'text-white');

        // Load câu hỏi của tiêu đề đó
        loadQuestions(title);
    }
      function startAiChat() {
        state = { level: 'ai', group: null };
        const container = document.getElementById('faqContainer');
        container.innerHTML = `
    <div class="text-left mb-4">
      <button onclick="loadRootMenu()"
              class="flex items-center space-x-1 text-sm text-indigo-600 hover:text-indigo-300 transition">
        <span class="material-symbols-outlined text-lg">arrow_back</span>
        <span>Back to Home</span>
      </button>
    </div>`;


        const input = document.getElementById('inputChat');
        if (input) {
            input.classList.remove('hidden');
        }

        showInput(); // nếu hàm này có ý nghĩa gì khác
    }


     function showInput() {
        const inputWrapper = document.getElementById('inputChat');
        if (inputWrapper) inputWrapper.classList.remove('hidden');
    }

    function hideInput() {
        const inputWrapper = document.getElementById('inputChat');
        if (inputWrapper) inputWrapper.classList.add('hidden');
    }


    async function sendMessage() {
        const input = document.getElementById('chatInput');
        const message = input.value.trim();
        if (!message) return;

        const container = document.getElementById('faqContainer');
        container.innerHTML += `
             <div class="flex justify-end mb-2">
        <div class="bg-indigo-600 text-white px-3 py-2 rounded-lg max-w-[80%]">${message}</div>
            </div>
        `;
        input.value = "";

        try {
            const response = await fetch(CHAT_API, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ message })
            });

            if (!response.ok) {
                const text = await response.text();
                throw new Error(text);
            }

            const result = await response.json();
           container.innerHTML += `
        <div class="flex justify-start mb-2">
            <div class="bg-gray-700 text-white px-4 py-3 rounded-2xl max-w-[80%] text-sm">
                ${result.response}
            </div>
        </div>
    `;

            container.lastElementChild?.scrollIntoView({ behavior: 'smooth' });
        } catch (error) {
            alert("Lỗi khi gửi tin nhắn: " + error.message);
            console.error(error);
        }
    }

    window.onload = loadRootMenu;

    /*ENter */
        window.onload = function () {
        loadRootMenu();

        document.getElementById('chatInput').addEventListener('keydown', function (e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                sendMessage();
            }
        });
    };

</script>

